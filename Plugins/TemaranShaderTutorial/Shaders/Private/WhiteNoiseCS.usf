#include "/Engine/Public/Platform.ush"
RWTexture3D<float> VolumeTexture;
float3 Dimensions;
float3 BrushUV;
float BrushSize;


[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 Gid : SV_GroupID,              //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
					   uint3 DTid : SV_DispatchThreadID,    //atm: 0...256 in rows & columns (XY)   --> "global" thread id
					   uint3 GTid : SV_GroupThreadID,       //atm: 0...256, -,- in columns (X)      --> current threadId in group / "local" threadId
					   uint GI : SV_GroupIndex)             //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group)
{   
	BrushUV.z *= 0.2;
	for (int z = 0; z < Dimensions.z; z++)
	{
		uint3 texcoord = uint3(DTid.x, DTid.y, z);
		float3 uv = texcoord / Dimensions;
		uv.z *= 0.2;
	
		float brushValue = clamp(1 - distance(uv, BrushUV) / BrushSize, 0, 1);
		brushValue = brushValue * brushValue;
		float output = VolumeTexture[texcoord] + brushValue;
		
		VolumeTexture[texcoord] = output;
	}
}
